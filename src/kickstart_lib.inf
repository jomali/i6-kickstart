

!!==============================================================================
!!
!!	EL BARÓN
!!	Personalizaciones a la librería Inform
!!
!!==============================================================================
!!
!!	Archivo:		baron_lib.inf
!!	Autor(es):		Victor Gijsbers
!!					J. Francisco Martín <jfm.lisaso@gmail.com>
!!	Idioma:			ES (Español)
!!	Sistema:		Inform-INFSP 6
!!	Plataforma:		Máquina-Z/Glulx
!!	Versión:		0.0
!!	Fecha:			2019/02/XX
!!
!!------------------------------------------------------------------------------
!!
!!	Este archivo forma parte de la ficción interactiva EL BARÓN.
!!
!!	EL BARÓN es software libre: usted puede redistribuirlo y/o
!!	modificarlo bajo los términos de la Licencia Pública General
!!	GNU publicada por la Fundación para el Software Libre, ya
!!	sea la versión 3 de la Licencia, o (a su elección) cualquier
!!	versión posterior.
!!
!!	EL BARÓN se distribuye con la esperanza de que sea útil,
!!	pero SIN GARANTÍA ALGUNA; ni siquiera la garantía implícita
!!	MERCANTIL o de APTITUD PARA UN PROPÓSITO DETERMINADO.
!!	Consulte los detalles de la Licencia Pública General GNU
!!	para más información.
!!
!!	Debería haber recibido una copia de la Licencia Pública
!!	General GNU junto a EL BARÓN. En caso contrario, consulte
!!	<http://www.gnu.org/licenses/>.
!!
!!	Copyright (c) 2004, Victor Gijsbers
!!	Copyright (c) 2018, J. Francisco Martín
!!
!!------------------------------------------------------------------------------
!!
!!	TABLA DE CONTENIDOS
!!
!!	1) Atributos adicionales
!!		<>	described
!!		<>	remarkable
!!
!!	2)	Redefiniciones sobre la librería Inform
!!		<>	Banner()
!!			-	PrintSerialNumber()
!!			-	PrintVersionNumber()
!!		<>	DrawStatusLine()
!!		<>	ExamineSub()
!!		<>	GetGNAOfObject()
!!		<>	LanguageDirection() / Redefinición de direcciones
!!		<>	LMode1Sub()
!!		<>	LMode2Sub()
!!		<>	LMode3Sub()
!!		<>	LookSub()
!!		<>	ParseNoun()
!!		<>	PSN__()
!!		<>	PRT__()
!!		<>	VersionSub()
!!
!!------------------------------------------------------------------------------

!!==============================================================================
!!
!!	1) Atributos adicionales
!!
!!------------------------------------------------------------------------------

!!------------------------------------------------------------------------------
!! Permite marcar objetos que ya han sido descritos al usuario —es análogo al
!! atributo 'visited' de las localidades—. La lógica encargada de marcar los
!! objetos al ser examinados por primera vez se encuentra en la rutina
!! ExamineSub().
!!------------------------------------------------------------------------------
Attribute described;

!!------------------------------------------------------------------------------
!! Permite marcar objetos como destacados dentro de la historia (por si mismo,
!! marcar un objeto como destacado no tiene ningún efecto práctico, pero puede
!! utilizarse en conjunto con otros sistemas como el de palabras destacadas,
!! por ejemplo).
!!------------------------------------------------------------------------------
Attribute remarkable;


!!==============================================================================
!!
!!	2)	Redefiniciones sobre la librería Inform
!!
!!------------------------------------------------------------------------------

!!------------------------------------------------------------------------------
!! Conjunto de rutinas para imprimir los créditos de la aplicación en
!! castellano.
!!
!!	@override verblibm.h
!!	@version 2019/06/17
!!------------------------------------------------------------------------------
[ Banner
	previous_style;
	if (Story ~= 0) {
		previous_style = Utils.set_text_style(TEXT_STYLE_HEADER);
		print (string) Story;
		Utils.set_text_style(previous_style);
		new_line;
	}
	if (Headline ~= 0) {
		print (string) Headline;
		new_line;
	}
	#Ifdef DEBUG;
	print "BETA ";
	#Ifnot;
	#Ifdef VERSION_DESKTOP;
	print "Versión ";
	#Ifnot; ! VERSION_WEB_MOBILE;
	print "v.";
	#Endif; ! VERSION_
	#Endif; ! DEBUG;
	PrintVersionNumber();
	#Ifdef VERSION_WEB_MOBILE;
	if (isVorpleSupported()) print " WEB";
	else print " LITE";
	#Endif; ! VERSION_WEB_MOBILE;
	print " / Núm. de serie ";
	PrintSerialNumber();
	print " / Creado con Inform ";
	inversion;
	#Ifdef DEBUG;
	print " ";
	#Ifdef STRICT_MODE;
	print "S";
	#Endif; ! STRICT_MODE
	#Ifdef INFIX;
	print "X";
	#Endif; ! INFIX
	#Endif; ! DEBUG;
	new_line;;
];

!! Imprime el número de serie
[ PrintSerialNumber
	i;
	#Ifdef	TARGET_ZCODE;
	for (i=0 : i<6 : i++) print (char) HDR_GAMESERIAL->i;
	#Ifnot;	! TARGET_GLULX;
	for (i=0 : i<6 : i++) print (char) ROM_GAMESERIAL->i;
	#Endif;	! TARGET_
];

!! Imprime el número de versión
[ PrintVersionNumber
	i;
	i = 0;  ! shut up compiler warning
	print Checking, ".";
	#Ifdef	TARGET_ZCODE;
	print (HDR_GAMERELEASE-->0) & $03ff;
	#Ifnot;	! TARGET_GLULX;
	@aloads ROM_GAMERELEASE 0 i;
	print i;
	#Endif;	! TARGET_
];

!!------------------------------------------------------------------------------
!! Elimina la barra de estado (crea una barra de estado sin altura). Sólo en
!! Máquina-Z. En Glulx se utiliza la configuración de ventanas de GWindows.
!!
!!	@override parserm.h
!!	@version 1.0
!!------------------------------------------------------------------------------
[ DrawStatusLine;
	StatusLineHeight(0);
	MainWindow();
];

!!------------------------------------------------------------------------------
!! Rutina para obtener la descripción de un objeto. Es idéntica a la rutina
!! original implementada en 'verblibm.h' salvo por un detalle: al examinar un
!! objeto por primera vez se le asigna el nuevo atributo 'described'.
!!
!!	@returns {boolean}
!!	@override verblibm.h
!!	@version 1.0
!!------------------------------------------------------------------------------
[ ExamineSub
	i;
	if (location == thedark) return L__M(##Examine, 1);
	i = noun.description;
	if (i == 0) {
		if (noun hasnt described) give noun described;
		if (noun has container) <<Search noun>>;
		if (noun has switchable) { L__M(##Examine, 3, noun); rfalse; }
		return L__M(##Examine, 2, noun);
	}
	PrintOrRun(noun, description);
	if (noun has switchable) L__M(##Examine, 3, noun);
	if (noun hasnt described) give noun described;
	if (AfterRoutines() == 1) rtrue;
];

!!------------------------------------------------------------------------------
!! Determina el código GNA ('gender-number-animation') del nombre corto del
!! objeto 'obj' pasado como parámetro. El código GNA es un número entero entre
!! 0 y 11:
!!
!!		0	animate		singular	masculine
!!		1							feminine
!!		2							neuter
!!		3				plural		masculine
!!		4							feminine
!!		5							neuter
!!		6	inanimate	singular	masculine
!!		7							feminine
!!		8							neuter
!!		9				plural		masculine
!!		10							feminine
!!		11							neuter
!!
!! Para determinar el código GNA de un objeto en INFSP6 se pueden seguir dos
!! estrategias: 1) utilizar sus atributos 'animate', 'male', 'female', 'neuter'
!! y 'pluralname' o, 2) si el objeto tiene definida una propiedad 'gender',
!! utlizando esta última. La rutina original hace uso únicamente de esa primera
!! estrategia, pero presenta el inconveniente de que el resultado no es siempre
!! el mismo para un objeto dado, puesto que la librería modifica sus atributos
!! automáticamente en tiempo de ejecución. La segunda estrategia, por su parte,
!! arroja siempre el mismo resultado. Esta implementación de la rutina incluye
!! un parámetro opcional booleano que permite seleccionar el tipo de estrategia
!! utilizado para determinar el GNA: el valor falso por defecto para usar la
!! estrategia 1 de la rutina original; verdadero para usar la estrategia 2.
!!
!!	@param {Object} obj - Objeto del que se desea conocer su código GNA
!!	@param {boolean} [flag=false] - Si se invoca con este parámetro activado
!!		(==true), el GNA se calcula utilizando el atributo 'animate' y la
!!		propiedad 'gender' del objeto. En caso contrario lo hace basándose en
!!		sus atributos 'animate', 'male', 'female', 'neuter' y 'pluralname'
!!	@returns {integer} Código GNA del objeto [0-11]
!!	@override parserm.h
!!	@version 1.0
!!------------------------------------------------------------------------------
[ GetGNAOfObject obj flag
	result gen pl;
    if (obj hasnt animate) result = 6;
	if (flag && obj provides gender) {
		switch (obj.gender) {
			1: gen = male;
			2: gen = female;
			3: gen = male; pl = true;
			4: gen = female; pl = true;
		}
	} else {
    	if (obj has male) gen = male;
	    if (obj has female) gen = female;
	    if (obj has neuter) gen = neuter;
	}
    if (gen == 0) {
        if (result == 0) gen = LanguageAnimateGender;
        else gen = LanguageInanimateGender;
    }
    if (gen == female) result = result + 1;
    if (gen == neuter) result = result + 2;
	if (pl) result = result + 3;
	else if (obj has pluralname) result = result + 3;

    return result;
];

!!------------------------------------------------------------------------------
!! Redefinición de los 8 puntos cardinales —norte, sur, este, oeste, nordeste,
!! noroeste, sudeste, sudoeste— y las direcciones 'arriba' y 'abajo' (se
!! mantienen las definiciones 'interior' y 'exterior' por defecto de
!! 'Spanish.h'), para eliminar los nombres 'cielo' 'techo', 'piso' y 'suelo',
!! de forma que puedan ser utilizados por otros objetos del relato.
!!
!! Se abre la posibilidad de añadir aquí direcciones nuevas, por ejemplo:
!! 'adelante' y 'atrás'. Para ello se redefine también la runtina
!! 'LanguageDirection()', usada a su vez en la rutina 'PrintCommand()' para
!! imprimir el nombre de las nuevas direcciones añadidas.
!!
!! Para utilizar las redefiniciones es necesario declarar la constante
!! WITHOUT_DIRECTIONS, de forma que se omiten los puntos cardinales por defecto
!! de la librería, junto con el reemplazo de la rutina 'LanguageDirection()'.
!!
!!	@override Spanish.h
!!	@version 1.0
!!------------------------------------------------------------------------------
CompassDirection n_obj "norte" compass
 with	name 'n//' 'norte',
		door_dir n_to,
;

CompassDirection s_obj "sur" compass
 with	name 's//' 'sur',
		door_dir s_to,
;

CompassDirection e_obj "este" compass
 with	name 'e//' 'este',
		door_dir e_to,
;

CompassDirection w_obj "oeste" compass
 with	name 'w//' 'o//' 'oeste',
		door_dir w_to,
;

CompassDirection ne_obj "nordeste" compass
 with	name 'ne' 'nordeste' 'noreste',
		door_dir ne_to,
;

CompassDirection nw_obj "noroeste" compass
 with	name 'no' 'nw' 'noroeste',
		door_dir nw_to,
;

CompassDirection se_obj "sudeste" compass
 with	name 'se' 'sureste' 'sudeste',
		door_dir se_to,
;

CompassDirection sw_obj "sudoeste" compass
 with	name 'so' 'sw' 'suroeste' 'sudoeste',
		door_dir sw_to,
;

CompassDirection u_obj "arriba" compass
 has	proper,
 with	name 'u//' 'arriba' 'ar' 'r//' 'sube',
		door_dir u_to,
;

CompassDirection d_obj "abajo" compass
 has	proper,
 with	name 'd//' 'abajo' 'ab' 'baja',
		door_dir d_to,
;

Property b_to;
CompassDirection b_obj "atrás" compass
 has	proper,
 with	name 'b//' 'atras',
		door_dir b_to,
;

Property f_to;
CompassDirection f_obj "adelante" compass
 has	proper,
 with	name 'f//' 'adelante',
		door_dir f_to,
;

[ LanguageDirection dir;
	switch (dir) {
		n_to:	print "al norte";
		s_to:	print "al sur";
		e_to:	print "al este";
		w_to:	print "al oeste";
		ne_to:	print "al nordeste";
		nw_to:	print "al noroeste";
		se_to:	print "al sudeste";
		sw_to:	print "al suroeste";
		u_to:	print "arriba";
		d_to:	print "abajo";
		in_to:	print "dentro";
		out_to:	print "fuera";
		b_to:	print "atrás";
		f_to:	print "adelante";
		default: return RunTimeError(9, dir);
	}
];

!!------------------------------------------------------------------------------
!! Redefinición de los 'lookmode': Breve, Largo y Superbreve.
!!
!!	@override verblibm.h
!!	@version 1.0
!!------------------------------------------------------------------------------
[ LMode1Sub; lookmode = 1; L__M( ##LMode1 ); ];	! Breve
[ LMode2Sub; lookmode = 2; L__M( ##LMode2 ); ];	! Largo (ahora por defecto)
[ LMode3Sub; lookmode = 3; L__M( ##LMode3 ); ];	! Superbreve

!!------------------------------------------------------------------------------
!! Redefinición de la rutina 'LookSub'. Imprime el nombre de la localidad
!! actual sólo al entrar en ella, en mayúsculas y evitando que se genere un
!! hipervínculo sobre él.
!!
!!	@override verblibm.h
!!	@dependency arrays.h
!!	@version 2019/06/22
!!------------------------------------------------------------------------------
Global _last_location = 0;
[ LookSub allow_abbrev
	i j k nl_flag previous_style visibility_levels;
	if (parent(player) == 0) return RunTimeError(10);

	.MovedByInitial;

	if (location == thedark) { visibility_ceiling = thedark; NoteArrival(); }
	else {
		visibility_levels = FindVisibilityLevels();
		if (visibility_ceiling == location) {
			NoteArrival();
			if (visibility_ceiling ~= location) jump MovedByInitial;
		}
	}

	if (_last_location ~= real_location) {
		_last_location = real_location;
		!! Elimina todos los hipervínculos impresos previamente:
		#Ifdef USE_VORPLE;
		VorpleExecuteJavaScriptCommand(BuildCommand("
			ifjs.clearHyperlinks();
		"));
		#Endif; ! USE_VORPLE;
		!! Establece los estilos de texto:
		#Ifdef TARGET_ZCODE;
		style bold;
		#Ifnot; ! TARGET_GLULX;
		#Ifdef VERSION_WEB_MOBILE;
		VorpleStyle(STYLE_DARK_GRAY_BACKGROUND);
		#Endif; ! VERSION_WEB_MOBILE;
		previous_style = Utils.set_text_style(TEXT_STYLE_IMPORTANT);
		#Endif; ! TARGET_
		!! Imprime el nombre de la localidad actual:
		if (visibility_levels == 0) {
			PrintToBuffer(utility_array_a, INPUT_BUFFER_LEN, thedark);
			PrintCharacterArray(utility_array_a, 1);
		} else {
			if (visibility_ceiling ~= location) {
				print (El_) visibility_ceiling, " ";
			}
			PrintToBuffer(utility_array_a, INPUT_BUFFER_LEN,
				visibility_ceiling);
			PrintCharacterArray(utility_array_a, 1);
		}
		new_line;
		!! Reestablece los estilos de texto anteriores:
		#Ifdef TARGET_ZCODE;
		style roman;
		#Ifnot; ! TARGET_GLULX;
		Utils.set_text_style(previous_style);
		#Ifdef VERSION_WEB_MOBILE;
		VorpleEndStyle();
		#Endif; ! VERSION_WEB_MOBILE;
		#Endif; ! TARGET_
	}

	! The room description (if visible)
	if (lookmode < 3 && visibility_ceiling == location) {
		if ((allow_abbrev ~= 1) || (lookmode == 2)
			|| (location hasnt visited)) {
			if (location.&describe ~= 0) RunRoutines(location, describe);
			else {
				if (location.description == 0) RunTimeError(11, location);
				else PrintOrRun(location, description);
			}
		}
	}

	if (visibility_ceiling == location) nl_flag = 1;
	if (visibility_levels == 0) Locale(thedark);
	else {
		for (i=player,j=visibility_levels : j>0: j--,i=parent(i))
			give i workflag;
		for (j=visibility_levels : j>0 : j--) {
			for (i=player,k=0 : k<j : k++) i=parent(i);
			if (i.inside_description ~= 0) {
				if (nl_flag) new_line; else nl_flag = 1;
				PrintOrRun(i,inside_description); }
			if (Locale(i)~=0) nl_flag=1;
		}
	}

	LookRoutine();
	ScoreArrival();
	action = ##Look;

	if (AfterRoutines() == 1) rtrue;
];

!!------------------------------------------------------------------------------
!! La rutina ParseNoun se ocupa de ignorar "de" cuando aparece entre dos
!! palabras reconocidas como names de un mismo objeto. Así, si un objeto tiene
!! en su campo "name" los valores "caja" "madera" "caoba" ParseNoun aceptará
!! "caja de madera" "caja de caoba" e incluso "caja de madera de caoba". En
!! cambio, ante la cadena "caja de bolsa", sólo aceptará la primera palabra
!! (caja) dejando sin procesar "de bolsa", lo que permite la posterior
!! interpretacion de frases como "saca caja de bolsa" e incluso "saca caja de
!! madera de caoba de bolsa". De paso también ignora artículos con lo que
!! también se admite: "saca la caja de madera de caoba de la bolsa".
!!
!! ParseNoun debe retornar un número que indica cuántas palabras admite como
!! pertenecientes al objeto. En nuestro ejemplo, ante "caja de madera" debe
!! retornar 3, pero ante "caja de bolsa" debe retornar 1.
!!
!! MODIFICACIÓN: Si usamos la rutina original y redefinimos el objeto con el
!! valor "caja" en sus campos "name" (name, name_m, name_f, name_mp y name_fp)
!! y los valores "madera" y "caoba" en el campo "adjectives", ParseNoun
!! aceptaría las cadenas "caja", "caja de madera", "caja de madera de caoba",
!! "madera", "caoba",… para referirse al objeto. Con la rutina modificada se
!! permite hacer parseado estricto de forma que las cadenas "madera" y "caoba"
!! no sean cadenas válidas. Es decir, de manera que sea precisa la existencia
!! de al menos una coincidencia con los valores de los campos "name" del
!! objeto.
!!
!!	@returns {integer} Número de palabras reconocidas en la entrada del usuario
!!	@override SpanishG.h
!!	@version 1.0
!!------------------------------------------------------------------------------
[ ParseNoun obj n dudas seguir gen p aux m nm nf nmp nfp a;

	n	= 0;	! núm. de palabras reconocidas de momento
	m	= 0;	! núm. de nombres reconocidos de momento
	nm	= 0;	! núm. de nombres masculinos reconocidos de momento
	nf	= 0;	! núm. de nombres femeninos reconocidos de momento
	nmp	= 0;	! núm. de nombres masculinos plurales reconocidos de momento
	nfp	= 0;	! núm. de nombres femeninos plurales reconocidos de momento
	a	= 0;	! núm. de adjetivos reconocidos de momento

	! Indica si hay que seguir mirando palabras para comprobar si las
	! siguientes se refieren o no a este mismo objeto
	seguir = 1;

	aux = aux;
	#ifdef DEBUG;
	aux = debug_flag;
	! Se desactiva el trazado de give
	! (para no cansar con tanto "nombreusado" cambiando continuamente)
	debug_flag = 0;
	#endif;
	give obj ~nombreusado; ! resetear nombreusado (quitar nombreusado)
	gen = 5;
	! 1=masculino,		  2=femenino,
	! 3=masculino plural, 4=femenino plural
	! 5=sin determinar

	while (seguir)
	{
		p = NextWord();
		if ((p=='de') && (n==0)) return 0;

		if (WordInProperty (p, obj, name_f))
		! Una palabra que se refiere al objeto
		{
			if (p) dict_flags_of_noun = (p->#dict_par1) & $$01110100;
			if (gen==5) gen = G_FEMENINO;
			n++;		! la contamos
			m++;
			nf++;
			n=n+dudas;	! añadimos todos los "de" "la"… que estaban sin contar
			dudas=0;	! y resetamos el contador de "de"s
!			print " --> es ahora femenino…." ; !infsp debug
			continue;	! volvemos al while
		}
		if (WordInProperty (p, obj, name_mp))
		! Una palabra que se refiere al objeto
		{
			if (p) dict_flags_of_noun = (p->#dict_par1) & $$01110100;
			if (gen==5) gen=G_MASCULINO+G_PLURAL;
			n++;		! la contamos
			m++;
			nmp++;
			n=n+dudas;	! añadimos todos los "de" "la"… que estaban sin contar
			dudas=0;	! y resetamos el contador de "de"s
			continue;	! volvemos al while
		}
		if (WordInProperty(p, obj, name_fp))
		! Una palabra que se refiere al objeto
		{
			if (p) dict_flags_of_noun = (p->#dict_par1) & $$01110100;
			if (gen==5) gen=G_FEMENINO+G_PLURAL;
			n++;		! la contamos
			m++;
			nfp++;
			n=n+dudas;	! añadimos todos los "de" "la"… que estaban sin contar
			dudas=0;	! y resetamos el contador de "de"s
			continue;	! volvemos al while
		}
		! [I7] se cambio de lugar este if para buscar el name_m (o name)
		! en ultimo lugar, debido a una interferencia q provoca la asignacion
		! 'automatica' de plural en los objetos I7
		if (WordInProperty(p, obj, name_m))
		! Una palabra que se refiere al objeto
		{
			if (p) dict_flags_of_noun = (p->#dict_par1) & $$01110100;
			if (gen==5) gen=G_MASCULINO;
			n++;		! la contamos
			m++;
			nm++;
			n=n+dudas;	! añadimos todos los "de" "la"… que estaban sin contar
			dudas=0;	! y resetamos el contador de "de"s
!			print " --> es ahora masculino…." ; !infsp debug
			continue;	! volvemos al while
		}
		if (WordInProperty(p, obj, adjectives))
		{
			if (p) dict_flags_of_noun = (p->#dict_par1) & $$01110100;
			n++;		! la contamos
			a++;
			n=n+dudas;	! añadimos todos los "de" "la"… que estaban sin contar
			dudas = 0;	! y resetamos el contador de "de"s
!			print (the) obj," --> adjetivo detectado….^" ; !infsp debug
			continue;	! volvemos al while
		}

		! Si la palabra no fue reconocida, miraremos si se trata
		! de 'de' o un artículo. En este caso mantenemos la duda y
		! seguimos mirando palabras, hasta que una de ellas encaje
		! en este objeto$ en cuyo caso se retornan todas las que se
		! han leido, o bien se encuentre una que no encaja en cuyo
		! caso se retorna las que se habían encontrado antes del "de"

		else if (p== 'el' or 'la' or 'los' or 'las' or 'de')
		{
			dudas++; continue;
		}
		! Si la palabra no fue reconocida, ni se trata de un artículo o de un
		! "de", se da la búsqueda por finalizada y se sale del bucle
		else seguir = 0;

	}! while block

	if (obj provides gender) {
		switch (gen) {
			1: give obj ~female ~pluralname;
			2: give obj female ~pluralname;
			3: give obj ~female pluralname;
			4: give obj female pluralname;
		}
	}

	! Si el matcheo fue por adjectives, entonces gen = 5 y "nombresusado" no
	! se han puesto
	if (gen < 5) give obj nombreusado;

	#ifdef DEBUG;
	debug_flag=aux;
	#endif;

	! En caso de que estemos usando parseado estricto, despreciamos el objeto
	! si no ha sido referenciado al menos por uno de sus nombres
	if (m == 0) return 0;

	return n; ! Se retorna número de palabras reconocidas
];

!!------------------------------------------------------------------------------
!! Rutina para imprimir el nombre corto de un objeto (Print Short Name). En
!! conjunto con la rutina 'PRT__()' (Print Rich Text) puede crear además un
!! hipervínculo asociado al objeto y utilizar un estilo de texto personalizado.
!!
!!	@returns {boolean} Verdadero
!!	@override parserm.h
!!	@version 2019/09/17
!!------------------------------------------------------------------------------
[ PSN__ obj;
	if (obj == 0) { print (string) NOTHING__TX; rtrue; }
	switch (metaclass(obj)) {
		Routine:	print "<routine ", obj, ">"; rtrue;
		String:		print "<string ~", (string) obj, "~>"; rtrue;
		nothing:	print "<illegal object number ", obj, ">"; rtrue;
	}
	if (obj == player) { print (string) YOURSELF__TX; rtrue; }
	#Ifdef LanguagePrintShortName;
	if (LanguagePrintShortName(obj)) rtrue;
	#Endif; ! LanguagePrintShortName;
	!! Se relega a la rutina 'short_name_indef()' del objeto las tareas de
	!! creación del hipervínculo y de selección de estilo (si es oportuno):
	if (indef_mode && obj.&short_name_indef ~= 0
		&& PrintOrRun(obj, short_name_indef, 1) ~= 0) {
		return true;
	}
	!! Se relega a la rutina 'short_name()' del objeto las tareas de
	!! creación del hipervínculo y de selección de estilo (si es oportuno):
	if (obj.&short_name ~= 0 && PrintOrRun(obj, short_name, 1) ~= 0) {
		return true;
	}
	!! Algunos mensajes de error del analizador de comandos pueden pasar
	!! objetos "VerboIrregular" que deben imprimirse en esta estapa para evitar
	!! que PRT__() pueda introducir algún estilo de texto destacado:
	if (obj ofclass VerboIrregular) {
		print (object) obj;
		return true;
	}
	!! 'PRT__()' se encarga de imprimir el nombre del objeto, crear el
	!! hipervínculo (si es oportuno) y seleccionar el estilo de texto adecuado:
	PRT__(obj);
	return true;
];

!!------------------------------------------------------------------------------
!! Rutina para imprimir texto "rico" o formateado (Print Rich Text). Imprime
!! una cadena de caracteres o el nombre de un objeto asociándole además un
!! hipervínculo y seleccionando un estilo de texto adecuado.
!!
!!	@param {string|Object} rtxt - Cadena de caracteres u objeto a imprimir
!!	@param {string} [alternative=0] - Permite especificar un texto alternativo
!!		a imprimir en lugar de 'rtxt'. La rutina sigue utilizando 'rtxt', no
!!		obstante, para determinar automáticamente el estilo de texto destacado
!!		—cuando el parámetro 'style' es 0— y para asociar a él el hipervínculo
!!	@param {integer} [type=0] - Código numérico forzando un tipo de objeto,
!!		independientemente de la definición de 'rtxt': 0, objetos genéricos; 1,
!!		objetos destacados; 2, puntos cardinales y otras direcciones de
!!		desplazamiento; 3, elecciones
!!	@returns {boolean} Verdadero
!!	@dependency baron.inf
!!	@dependency baron_utils.inf
!!	@dependency hyperlinks.h
!!	@dependency textStyles.h
!!	@version 2019/09/14
!!------------------------------------------------------------------------------
[ PRT__ rtxt alternative object_type
	style_code previous_style hyperlinks_status;
	!! Establece el tipo de objeto:
	if (object_type == 0 && metaclass(rtxt) == Object) {
		if (rtxt ofclass ChoiceSetItem) {
			object_type = CHOICE_OBJECT;
		} else if (rtxt ofclass CompassDirection or AdjacentRoom) {
			object_type = DIRECTION_OBJECT;
		} else if ((rtxt has remarkable)
			|| (~~(rtxt has concealed or scenery))) {
			object_type = REMARKABLE_OBJECT;
		} else {
			object_type = OTHER_OBJECT;
		}
	} else if (object_type == 0) {
		object_type = OTHER_OBJECT;
	}

	!! Establece el estilo de texto destacado:
	style_code = Utils.get_highlight_style(object_type);
	previous_style = Utils.set_text_style(style_code);

	!! Determina estado de los hipervínculos y crea uno si están activados:
	hyperlinks_status = Utils.get_hyperlinks_status(object_type);
	if (metaclass(alternative) == String) rtxt = alternative;
	#Ifdef USE_HYPERLINKS;
	if (hyperlinks_status) {
		Hyperlink(rtxt);
	} else {
		if (metaclass(rtxt) == String) print (string) rtxt;
		else print (object) rtxt;
	}
	#Ifnot;
	#Ifdef USE_VORPLE;
	if (hyperlinks_status) {
		Utils.create_vorple_hyperlink(rtxt);
	} else {
		if (metaclass(rtxt) == String) print (string) rtxt;
		else print (object) rtxt;
	}
	#Ifnot;
	if (metaclass(rtxt) == String) print (string) rtxt;
	else print (object) rtxt;
	#Endif; ! USE_VORPLE;
	#Endif; ! USE_HYPERLINKS;

	!! Reestablece el estilo utilizado anteriormente y retorna:
	Utils.set_text_style(previous_style);
	return true;
];

!!------------------------------------------------------------------------------
!! Créditos detallados de la aplicación.
!!
!!	@override verblibm.h
!!	@version 1.0
!!------------------------------------------------------------------------------
[ VersionSub
	ix;
	new_line;
	Banner();
	print "Versión de la librería Inform ", (string) LibRelease;
	print " / Núm. de serie librería ", (string) LibSerial;
	new_line;
	#Ifdef LanguageVersion;
	print (string) LanguageVersion, "^";
	#Endif; ! LanguageVersion
	#Ifdef TARGET_ZCODE;
	ix = 0; ! shut up compiler warning
	if (standard_interpreter > 0) {
		print "Estándar del intérprete ", standard_interpreter/256, ".",
			standard_interpreter%256, " (", HDR_TERPNUMBER->0;
		#Iftrue (#version_number == 6);
		print (char) '.', HDR_TERPVERSION->0;
		#Ifnot;
		print (char) HDR_TERPVERSION->0;
		#Endif;
		print ") / ";
	} else {
		print "Intérprete ", HDR_TERPNUMBER->0, " Versión ";
		#Iftrue (#version_number == 6);
		print HDR_TERPVERSION->0;
		#Ifnot;
		print (char) HDR_TERPVERSION->0;
		#Endif;
		print " / ";
	}
	#Ifnot; ! TARGET_GLULX;
	@gestalt 1 0 ix;
	print "Versión del intérprete ", ix / $10000, ".", (ix & $FF00) / $100,
	".", ix & $FF, " / ";
	@gestalt 0 0 ix;
	print "VM ", ix / $10000, ".", (ix & $FF00) / $100, ".", ix & $FF;
	#Endif; ! TARGET_;
	new_line;
	#Ifndef VERSION_DESKTOP;
    if (isVorpleSupported()) {
        VorpleExecuteJavaScriptCommand("vorple.version");
		print "Versión de la librería Vorple ";
 		PrintStringOrArray(VorpleWhatTextWasReturned());
		new_line;
    }
	#Endif; ! VERSION_DESKTOP
	new_line;
	return true;
];
